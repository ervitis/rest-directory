"""
Django settings for rest_directory_project project.

Generated by 'django-admin startproject' using Django 1.8.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import yaml

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

yaml_path = BASE_DIR + '/.environment.yaml'

INDEX_LIST = ['key', 'environment', 'db']

try:
    with open(yaml_path, 'r') as f_yaml:
        data = yaml.load(f_yaml)
except Exception as e:
    raise Exception('%s/.environment.yaml file not found' % BASE_DIR)

if data is None or len(data) == 0:
    raise Exception('Error in environment.yaml file')

value_exists = [i in data for i in INDEX_LIST]
if False in value_exists:
    raise Exception('the environment file doesn\'t have the %s values' % ', '.join(INDEX_LIST))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
if not data['key']:
    raise Exception('key doesn\'t have exists')
if 'secret_key' not in data['key']:
    raise Exception('key doesn\'t have secret_key')

SECRET_KEY = data['key']['secret_key']

# SECURITY WARNING: don't run with debug turned on in production!

if not data['environment']:
    raise Exception('environment doesn\'t exists')
if 'env' not in data['environment']:
    raise Exception('environment doesn\'t have env')

if data['environment']['env'] == 'dev':
    DEBUG = True
else:
    DEBUG = False

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'directory',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'rest_directory_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'rest_directory_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

if not data['db']:
    raise Exception('db doesn\'t exists')

DB_VALUES = ['db_name', 'db_host', 'db_port', 'db_user', 'db_pass']
value_exists = [i in data['db'] for i in DB_VALUES]
if False in value_exists:
    raise Exception('No database configured. You have to set the keys %s' % ', '.join(DB_VALUES))

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': data['db']['db_name'],
        'HOST': data['db']['db_host'],
        'PORT': data['db']['db_port'],
        'PASSWORD': data['db']['db_pass'],
        'USER': data['db']['db_user'],
    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'
